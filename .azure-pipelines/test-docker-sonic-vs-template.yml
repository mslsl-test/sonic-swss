parameters:
- name: timeout
  type: number
  default: 480

- name: log_artifact_name
  type: string

- name: gcov_artifact_name
  type: string

- name: sonic_slave
  type: string

- name: archive_gcov
  type: boolean
  default: false

- name: docker_sonic_vs_name
  type: string
  default: docker-sonic-vs

- name: swss_common_branch
  type: string
  default: '$(BUILD_BRANCH)'

- name: sonic_buildimage_ubuntu20_04
  type: string
  default: '$(BUILD_BRANCH)'

- name: asan
  type: boolean
  default: false

- name: num_ports
  type: number
  default: 0

- name: run_tests_pattern
  type: string
  default: ""

jobs:
- job:
  displayName: vstest
  timeoutInMinutes: ${{ parameters.timeout }}

  pool: sonictest

  steps:
  - script: |
      ls -A1 | xargs -I{} sudo rm -rf {}
    displayName: "Clean workspace"
  - checkout: self
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: ${{ parameters.docker_sonic_vs_name }}
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built ${{ parameters.docker_sonic_vs_name }}"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-swss-common
      artifact: sonic-swss-common.amd64.ubuntu20_04
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/${{ parameters.swss_common_branch }}'
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download sonic swss common deb packages"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: sonic-net.sonic-buildimage-ubuntu20.04
      artifact: sonic-buildimage.amd64.ubuntu20_04
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/${{ parameters.sonic_buildimage_ubuntu20_04 }}'
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download sonic buildimage ubuntu20.04 deb packages"

  - script: |
      set -ex
      sudo .azure-pipelines/build_and_install_module.sh

      sudo apt-get install -y libhiredis0.14 libyang0.16
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/libprotobuf*_amd64.deb $(Build.ArtifactStagingDirectory)/download/libprotobuf-lite*_amd64.deb $(Build.ArtifactStagingDirectory)/download/python3-protobuf*_amd64.deb
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/libdashapi*.deb
      sudo dpkg -i --force-confask,confnew $(Build.ArtifactStagingDirectory)/download/libswsscommon_1.0.0_amd64.deb || apt-get install -f
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/python3-swsscommon_1.0.0_amd64.deb

      # install packages for vs test
      sudo apt-get install -y net-tools bridge-utils vlan
      sudo apt-get install -y python3-pip
      sudo pip3 install pytest==4.6.2 attrs==19.1.0 exabgp==4.0.10 distro==1.5.0 docker>=4.4.1 redis==3.3.4 flaky==3.7.0 requests==2.31.0
    displayName: "Install dependencies"

  - script: |
      set -ex
      sudo docker load -i $(Build.ArtifactStagingDirectory)/download/docker-sonic-vs.gz
      docker ps
      ip netns list
      uname -a
      sudo /sbin/ip link add Vrf1 type vrf table 1001 || { echo 'vrf command failed' ; exit 1; }
      sudo /sbin/ip link del Vrf1 type vrf table 1001
      pushd tests

      params=""
      if [ '${{ parameters.archive_gcov }}' == True ]; then
        params=" ${params} --keeptb "
      fi
      if [ '${{ parameters.asan }}' == True ]; then
        params=" ${params} --graceful-stop "
      fi
      if [ ${{ parameters.num_ports }} -gt 0 ]; then
        params=" ${params} --num-ports=${{ parameters.num_ports }} "
      fi

      all_tests=$(ls test_*.py)
      all_tests="${all_tests} p4rt"

      if [ -n '${{ parameters.run_tests_pattern }}' ]; then
        all_tests=" $(ls ${{ parameters.run_tests_pattern }}) "
      fi

      test_set=()
      # Run 20 tests as a set.
      for test in ${all_tests}; do
        test_set+=("${test}")
        if [ ${#test_set[@]} -ge 20 ]; then
          test_name=$(echo "${test_set[0]}" | cut -d "." -f 1)
          echo "${test_set[*]}" | xargs sudo py.test -v --force-flaky --junitxml="${test_name}_tr.xml" $params --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber).asan-${{ parameters.asan }}
          container_count=$(docker ps -q -a | wc -l)
          if [ '${{ parameters.archive_gcov }}' == True ] && [ ${container_count} -gt 0 ]; then
            ./gcov_support.sh set_environment $(Build.ArtifactStagingDirectory)
            docker stop $(docker ps -q -a)
            docker rm $(docker ps -q -a)
          fi
          test_set=()
        fi
      done
      if [ ${#test_set[@]} -gt 0 ]; then
        test_name=$(echo "${test_set[0]}" | cut -d "." -f 1)
        echo "${test_set[*]}" | xargs sudo py.test -v $params --force-flaky --junitxml="${test_name}_tr.xml" $params --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber).asan-${{ parameters.asan }}
        container_count=$(docker ps -q -a | wc -l)
        if [ '${{ parameters.archive_gcov }}' == True ] && [ ${container_count} -gt 0 ]; then
          ./gcov_support.sh set_environment $(Build.ArtifactStagingDirectory)
          docker stop $(docker ps -q -a)
          docker rm $(docker ps -q -a)
        fi
      fi

      rm -rf $(Build.ArtifactStagingDirectory)/download
    displayName: "Run vs tests"
    continueOnError: ${{ parameters.asan }}

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/*_tr.xml'
      testRunTitle: vstest
    condition: succeeded()

  - script: |
      cp -r tests/log $(Build.ArtifactStagingDirectory)/

      if [ '${{ parameters.asan }}' == True ]; then
        cp -vr tests/log/*/log/asan $(Build.ArtifactStagingDirectory)/
      fi

      if [ '${{ parameters.archive_gcov }}' == True ]; then
        sudo apt-get install -y lcov
        cd $(Build.ArtifactStagingDirectory)/gcov_tmp/
        tar -zcvf sonic-gcov.tar.gz sonic-gcov/
        rm -rf sonic-gcov
      fi
    displayName: "Collect logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/gcov_tmp
    artifact: ${{ parameters.gcov_artifact_name }}
    displayName: "Publish gcov output"
    condition: and(succeeded(), eq('${{ parameters.archive_gcov }}', true))

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.log_artifact_name }}@$(System.JobAttempt)
    displayName: "Publish logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/asan
    artifact: asan-reports
    displayName: "Publish ASAN reports"
    condition: eq('${{ parameters.asan }}', true)

  - script: |
      if [ "$(ls -A $(Build.ArtifactStagingDirectory)/asan)" ]; then
        echo "There are issues reported by ASAN"
        exit 1
      else
        echo "No issues reported by ASAN"
      fi
    displayName: "Check ASAN reports"
    condition: eq('${{ parameters.asan }}', true)
    continueOnError: true
